    
------------------------------------------------------------------------------
                  MIN CPU OPCODES LIST rev 14 / DAVEX 2004 
------------------------------------------------------------------------------
 
 That's some days of funking intense reverse engineering, have pokefun! :-)
 
 -- DaveX (davexxx@gmail.com)

 24/5/09 :
 Reflecting the instruction list at Sublab Pokemon-Mini instruction list.
 More information can be read at: http://wiki.sublab.net/index.php/Pokemon_Mini

 14/9/04 :
 Added new opcodes and U & V registers to opcode tables, special thanks to 
 asterick for giving a sense to them!
 
 example of U, V use: (if B==A then A becomes 1, otherwise A becomes 0)
                movb U, 0
                jmp l1
         l1:    mov U,1
                cmp B,A
                jz l2    
         l2:    mov A,V
 
 Next revision will come in a new flavor! 

 29/6/04 :
 All Extended 0 opcodes involving known registers are now understood, now there 
 are only a few unknown opcodes left.
 In opcode tables, lines starting with "%" were added or changed since the last 
 revision
  
------------------------------------------------------------------------------
 GENERAL INFO ABOUT MIN CPU
------------------------------------------------------------------------------

 Registers (8 bits) :  A, B, H, L, F, N
 Registers (16bits) :  BA, HL, X, Y, N, SP, PC
 Registers (banks)  :  I, XI, YI, U, V
 
 U and V are special registers. When a jump or a call is taken, U is copied
 into V. When call/interrupts are taken, V is stored on the stack and restored
 when ret/reti is called.

 Note: U restore into V if the next instruction isn't a jump or a call.
  
 FLAGS layout:  [IE][??][LM][BM][SF][OF][CF][ZF]
 
 SF = Sign Flag, 1 when negative
 OF = Overflow Flag
 CF = Carry Flag
 ZF = Zero Flag
 BM = BCD Mode, 1 when the arithmetic operations should be made on BCD numbers
 LM = Low Mask, 1 when arithmetic operations results should be and'ed with 0x0F
 IF = Interrupt Flag
 ID = Interrupt Disable

 Interrupts are enabled when both IF and ID are zero.

 BM and LM only affects ADD, SUB, ADC and SBC.
  
------------------------------------------------------------------------------
 GENERAL MEMORY LAYOUT
------------------------------------------------------------------------------

 See: http://wiki.sublab.net/index.php/PM_Memory

------------------------------------------------------------------------------
 INTERRUPTS
------------------------------------------------------------------------------

 See: http://wiki.sublab.net/index.php/PM_IRQs
 and  http://wiki.sublab.net/index.php/PM_Bios

 There are 77 interrupts. Some are triggered by the hardware, all can be 
 triggered by software using the "INT" instruction.
 Interrupts vectors are stored from memory location 0 (in the BIOS)
     mem16[0] = address of interrupt 0 handler
     mem16[2] = address of interrupt 1 handler
     ...
     mem16[0x98] = address of interrupt 0x4C handler
 
 The BIOS is handling every interrupts. Some of them are then forwarded to
 the cart ROM, that has 6 bytes of code for each cart-forwarded-interrupts 
 starting at address 0x2102 (which is interrupt 0, system reset, 
 game entry point)

------------------------------------------------------------------------------
 HARDWARE REGISTERS
------------------------------------------------------------------------------

 See: http://wiki.sublab.net/index.php/PM_Registers
     
------------------------------------------------------------------------------
 INSTRUCTION SET
------------------------------------------------------------------------------

 See: http://wiki.sublab.net/index.php/PM_InstructionList

for instruction enocoding: 
  rb:   A = 0          rw:   BA = 0                                        
        B = 1                HL = 1
        L = 2                X  = 2
        H = 3                Y  = 3

- Flags are changed by arithmetic and logic operations only
- To calculate the branch targets, assume the PC points to the next instruction
  (the one following the current instruction)
- For N addressing, the specified 8 bit offset (ofs8) is unsigned unlike other 
  8 bits offsets which are signed

 +----------------------+------------------------+----------------------------+----+
 | add A,A              | 00                     |  A <- A + A                |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | add A,B              | 01                     |  A <- A + B                |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | add A,imm8           | 02:imm8                |  A <- A + imm8             |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | add A,[HL]           | 03                     |  A <- A + mem8[I<<16+HL]   |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | add A,[N+ofs8]       | 04:ofs8                |  A <- A +                  |SOCZ|
 |                      |                        |  mem8[I<<16+N<<8+ofs8]     |    |
 +----------------------+------------------------+----------------------------+----+
 | add A,[ofs16]        | 05:ofs16L:ofs16H       |  A <- A + mem8[I<<16+ofs16]|SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | add A,[X]            | 06                     |  A <- A + mem8[XI<<16+X]   |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | add A,[Y]            | 07                     |  A <- A + mem8[YI<<16+X]   |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | adc A,A              | 08                     |  A <- A + A + CF           |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | adc A,B              | 09                     |  A <- A + B + CF           |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | adc A,imm8           | 0A:imm8                |  A <- A + imm8 + CF        |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | adc A,[HL]           | 0B                     |  A <- A + CF +             |SOCZ|
 |                      |                        |   mem8[I<<16+HL]           |    |
 +----------------------+------------------------+----------------------------+----+
 | adc A,[N+ofs8]       | 0C:ofs8                |  A <- A + CF +             |SOCZ|
 |                      |                        |   mem8[I<<16+N<<8+ofs8]    |    |
 +----------------------+------------------------+----------------------------+----+
 | adc A,[ofs16]        | 0D:ofs16L:ofs16H       |  A <- A + CF +             |SOCZ|
 |                      |                        |   mem8[I<<16+ofs16]        |    |
 +----------------------+------------------------+----------------------------+----+
 | adc A,[X]            | 0E                     |  A <- A + CF +             |SOCZ|
 |                      |                        |   mem8[XI<<16+X]           |    |
 +----------------------+------------------------+----------------------------+----+
 | adc A,[Y]            | 0F                     |  A <- A + CF +             |SOCZ|
 |                      |                        |   mem8[YI<<16+Y]           |    |
 +----------------------+------------------------+----------------------------+----+
 | sub A,A              | 10                     |  A <- A - A                |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | sub A,B              | 11                     |  A <- A - B                |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | sub A,imm8           | 12:imm8                |  A <- A - imm8             |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | sub A,[HL]           | 13                     |  A <- A - mem8[I<<16+HL]   |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | sub A,[N+ofs8]       | 14:ofs8                |  A <- A -                  |SOCZ|
 |                      |                        |   mem8[I<<16+N<<8+ofs8]    |    |
 +----------------------+------------------------+----------------------------+----+
 | sub A,[ofs16]        | 15:ofs16L:ofs16H       |  A <- A - mem8[I<<16+ofs16]|SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | sub A,[X]            | 16                     |  A <- A - mem8[XI<<16+X]   |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | sub A,[Y]            | 17                     |  A <- A - mem8[YI<<16+X]   |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | sbc A,A              | 18                     |  A <- A - A - CF           |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | sbc A,B              | 19                     |  A <- A - B - CF           |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | sbc A,imm8           | 1A:imm8                |  A <- A - imm8 - CF        |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | sbc A,[HL]           | 1B                     |  A <- A - CF -             |SOCZ|
 |                      |                        |   mem8[I<<16+HL]           |    |
 +----------------------+------------------------+----------------------------+----+
 | sbc A,[N+ofs8]       | 1C:ofs8                |  A <- A - CF -             |SOCZ|
 |                      |                        |   mem8[I<<16+N<<8+ofs8]    |    |
 +----------------------+------------------------+----------------------------+----+
 | sbc A,[ofs16]        | 1D:ofs16L:ofs16H       |  A <- A - CF -             |SOCZ|
 |                      |                        |   mem8[I<<16+ofs16]        |    |
 +----------------------+------------------------+----------------------------+----+
 | sbc A,[X]            | 1E                     |  A <- A - CF -             |SOCZ|
 |                      |                        |   mem8[XI<<16+X]           |    |
 +----------------------+------------------------+----------------------------+----+
 | sbc A,[Y]            | 1F                     |  A <- A - CF -             |SOCZ|
 |                      |                        |   mem8[YI<<16+Y]           |    |
 +----------------------+------------------------+----------------------------+----+
 | and A,A              | 20                     |  A <- A and A              |S  Z|
 +----------------------+------------------------+----------------------------+----+
 | and A,B              | 21                     |  A <- A and B              |S  Z|
 +----------------------+------------------------+----------------------------+----+
 | and A,imm8           | 22:imm8                |  A <- A and imm8           |S  Z|
 +----------------------+------------------------+----------------------------+----+
 | and A,[HL]           | 23                     |  A <- A and mem8[I<<16+HL] |S  Z|
 +----------------------+------------------------+----------------------------+----+
 | and A,[N+ofs8]       | 24:ofs8                |  A <- A and                |S  Z|
 |                      |                        |   mem8[I<<16+N<<8+ofs8]    |    |
 +----------------------+------------------------+----------------------------+----+
 | and A,[ofs16]        | 25:ofs16L:ofs16H       |  A <- A and                |S  Z|
 |                      |                        |   mem8[I<<16+ofs16]        |    |
 +----------------------+------------------------+----------------------------+----+
 | and A,[X]            | 26                     |  A <- A and mem8[XI<<16+X] |S  Z|
 +----------------------+------------------------+----------------------------+----+
 | and A,[Y]            | 27                     |  A <- A and mem8[YI<<16+Y] |S  Z|
 +----------------------+------------------------+----------------------------+----+
 | or A,A               | 28                     |  A <- A or A               |S  Z|
 +----------------------+------------------------+----------------------------+----+
 | or A,B               | 29                     |  A <- A or B               |S  Z|
 +----------------------+------------------------+----------------------------+----+
 | or A,imm8            | 2A:imm8                |  A <- A or imm8            |S  Z|
 +----------------------+------------------------+----------------------------+----+
 | or A,[HL]            | 2B                     |  A <- A or mem8[I<<16+HL]  |S  Z|
 +----------------------+------------------------+----------------------------+----+
 | or A,[N+ofs8]        | 2C:ofs8                |  A <- A or                 |S  Z|
 |                      |                        |   mem8[I<<16+N<<8+ofs8]    |    |
 +----------------------+------------------------+----------------------------+----+
 | or A,[ofs16]         | 2D:ofs16L:ofs16H       |  A <- A or                 |S  Z|
 |                      |                        |   mem8[I<<16+ofs16]        |    |
 +----------------------+------------------------+----------------------------+----+
 | or A,[X]             | 2E                     |  A <- A or mem8[XI<<16+X]  |S  Z|
 +----------------------+------------------------+----------------------------+----+
 | or A,[Y]             | 2F                     |  A <- A or mem8[YI<<16+Y]  |S  Z|
 +----------------------+------------------------+----------------------------+----+
 | cmp A,A              | 30                     |  change flag like if 0     |SOCZ|
 |                      |                        | update flags but don't store    |
 +----------------------+------------------------+----------------------------+----+
 | cmp A,B              | 31                     |  temp <- A - B             |SOCZ|
 |                      |                        |update flags but don't store|    |
 +----------------------+------------------------+----------------------------+----+
 | cmp A,imm8           | 32:imm8                |  temp <- A - imm8          |SOCZ|
 |                      |                        |update flags but don't store|    |
 +----------------------+------------------------+----------------------------+----+
 | cmp A,[HL]           | 33                     |  temp <- A - mem8[I<<16+HL]|SOCZ|
 |                      |                        |update flags but don't store|    |
 +----------------------+------------------------+----------------------------+----+
 | cmp A,[N+ofs8]       | 34:ofs8                |  temp <- A -               |SOCZ|
 |                      |                        |  mem8[I<<16+N<<8+ofs8]     |    |
 |                      |                        |update flags but don't store|    |
 +----------------------+------------------------+----------------------------+----+
 | cmp A,[ofs16]        | 35:ofs16L:ofs16H       |  temp <- A -               |SOCZ|
 |                      |                        |  mem8[I<<16+ofs16]         |    |
 |                      |                        |update flags but don't store|    |
 +----------------------+------------------------+----------------------------+----+
 | cmp A,[X]            | 36                     |  temp <- A - mem8[XI<<16+X]|SOCZ|
 |                      |                        |update flags but don't store|    |
 +----------------------+------------------------+----------------------------+----+
 | cmp A,[Y]            | 37                     |  temp <- A - mem8[YI<<16+Y]|SOCZ|
 |                      |                        |update flags but don't store|    |
 +----------------------+------------------------+----------------------------+----+
 | xor A,A              | 38                     |  A <- 0                    |S  Z|
 +----------------------+------------------------+----------------------------+----+
 | xor A,B              | 39                     |  A <- A xor B              |S  Z|
 +----------------------+------------------------+----------------------------+----+
 | xor A,imm8           | 3A:imm8                |  A <- A xor imm8           |S  Z|
 +----------------------+------------------------+----------------------------+----+
 | xor A,[HL]           | 3B                     |  A <- A xor mem8[I<<16+HL] |S  Z|
 +----------------------+------------------------+----------------------------+----+
 | xor A,[N+ofs8]       | 3C:ofs8                |  A <- A xor                |S  Z|
 |                      |                        |   mem8[I<<16+N<<16+ofs8]   |    |
 +----------------------+------------------------+----------------------------+----+
 | xor A,[ofs16]        | 3D:ofs16L:ofs16H       |  A <- A xor                |S  Z|
 |                      |                        |   mem8[I<<16+ofs16]        |    |
 +----------------------+------------------------+----------------------------+----+
 | xor A,[X]            | 3E                     |  A <- A xor mem8[XI<<16+X] |S  Z|
 +----------------------+------------------------+----------------------------+----+
 | xor A,[Y]            | 3F                     |  A <- A xor mem8[YI<<16+Y] |S  Z|
 +----------------------+------------------------+----------------------------+----+
 | mov rb1,rb2          | 40+rb1<<3+rb2          |  rb1 <- rb2                | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov rb,[N+ofs8]      | 44+rb<<3:ofs8          |  rb <-                     | -  |
 |                      |                        |   mem8[I<<16+N<<8+ofs8]    |    |
 +----------------------+------------------------+----------------------------+----+
 | mov rb,[HL]          | 45+rb<<3               |  rb <- mem8[I<<16+HL]      | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov rb,[X]           | 46+rb<<3               |  rb <- mem8[XI<<16+X]      | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov rb,[Y]           | 47+rb<<3               |  rb <- mem8[YI<<16+Y]      | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov [X],rb           | 60+rb                  |  mem8[XI<<16+X] <- rb      | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov [X],[N+ofs8]     | 64:ofs8                |  mem8[XI<<16+X] <-         | -  |
 |                      |                        |   mem8[I<<16+N<<8+ofs8]    |    |
 +----------------------+------------------------+----------------------------+----+
 | mov [X],[HL]         | 65                     |  mem8[XI<<16+X] <-         | -  |
 |                      |                        |   mem8[I<<16+HL]           |    |
 +----------------------+------------------------+----------------------------+----+
 | mov [X],[X]          | 66                     |  mem8[XI<<16+X] <-         | -  |
 |                      |                        |   mem8[XI<<16+X]           |    |
 +----------------------+------------------------+----------------------------+----+
 | mov [X],[Y]          | 67                     |  mem8[XI<<16+X] <-         | -  |
 |                      |                        |   mem8[YI<<16+Y]           |    |
 +----------------------+------------------------+----------------------------+----+
 | mov [HL],rb          | 68+rb                  |  mem8[I<<16+HL] <- rb      | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov [HL],[N+ofs8]    | 6C:ofs8                |  mem8[I<<16+HL] <-         | -  |
 |                      |                        |   mem8[I<<16+N<<8+ofs8]    |    |
 +----------------------+------------------------+----------------------------+----+
 | mov [HL],[HL]        | 6D                     |  mem8[I<<16+HL] <-         | -  |
 |                      |                        |   mem8[I<<16+HL]           |    |
 +----------------------+------------------------+----------------------------+----+
 | mov [HL],[X]         | 6E                     |  mem8[I<<16+HL] <-         | -  |
 |                      |                        |   mem8[XI<<16+X]           |    |
 +----------------------+------------------------+----------------------------+----+
 | mov [HL],[Y]         | 6F                     |  mem8[I<<16+HL] <-         | -  |
 |                      |                        |   mem8[YI<<16+Y]           |    |
 +----------------------+------------------------+----------------------------+----+
 | mov [Y],rb           | 70+rb                  |  mem8[YI<<16+Y] <- rb      | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov [Y],[N+ofs8]     | 74:ofs8                |  mem8[YI<<16+Y] <-         | -  |
 |                      |                        |   mem8[I<<16+N<<8+ofs8]    |    |
 +----------------------+------------------------+----------------------------+----+
 | mov [Y],[HL]         | 75                     |  mem8[YI<<16+Y] <-         | -  |
 |                      |                        |   mem8[I<<16+HL]           |    |
 +----------------------+------------------------+----------------------------+----+
 | mov [Y],[X]          | 76                     |  mem8[YI<<16+Y] <-         | -  |
 |                      |                        |   mem8[XI<<16+X]           |    |
 +----------------------+------------------------+----------------------------+----+
 | mov [Y],[Y]          | 77                     |  mem8[YI<<16+Y] <-         | -  |
 |                      |                        |   mem8[YI<<16+Y]           |    |
 +----------------------+------------------------+----------------------------+----+
 | mov [N+ofs8],rb      | 78+rb:ofs8             |  mem8[I<<16+N<<8+ofs8]     | -  |
 |                      |                        |   <- rb                    |    |
 +----------------------+------------------------+----------------------------+----+
 | mov [N+ofs8],[HL]    | 7D:ofs8                |  mem8[I<<16+N<<8+ofs8]     | -  |
 |                      |                        |   <- mem8[HL]              |    |
 +----------------------+------------------------+----------------------------+----+
 | mov [N+ofs8],[X]     | 7E:ofs8                |  mem8[I<<16+N<<8+ofs8]     | -  |
 |                      |                        |   <- mem8[X]               |    |
 +----------------------+------------------------+----------------------------+----+
 | mov [N+ofs8],[Y]     | 7F:ofs8                |  mem8[I<<16+N<<8+ofs8]     | -  |
 |                      |                        |   <- mem8[Y]               |    |
 +----------------------+------------------------+----------------------------+----+
 | inc rb               | 80+rb                  |  rb <- rb + 1              |   Z|
 +----------------------+------------------------+----------------------------+----+
 | inc N                | 84                     |  N <- N + 1                |   Z|
 +----------------------+------------------------+----------------------------+----+
 | inc [N+ofs8]         | 85:ofs8                |  mem8[I<<16+N<<8+ofs8] <-  |   Z|
 |                      |                        |   mem8[I<<16+N<<8+ofs8] + 1|    |
 +----------------------+------------------------+----------------------------+----+
 | inc [HL]             | 86                     |  mem8[I<<16+HL] <-         |   Z|
 |                      |                        |   mem8[I<<16+HL] + 1        |    |
 +----------------------+------------------------+----------------------------+----+
 | inc SP               | 87                     |  SP <- SP + 1              |   Z|
 +----------------------+------------------------+----------------------------+----+
 | dec rb               | 88+rb                  |  rb <- rb - 1              |   Z|
 +----------------------+------------------------+----------------------------+----+
 | dec N                | 8C                     |  N <- N - 1                |   Z|
 +----------------------+------------------------+----------------------------+----+
 | dec [N+ofs8]         | 8D:ofs8                |  mem8[I<<16+N<<8+ofs8] <-  |   Z|
 |                      |                        |   mem8[I<<16+N<<8+ofs8] - 1|    |
 +----------------------+------------------------+----------------------------+----+
 | dec [HL]             | 8E                     |  mem8[I<<16+HL] <-         |   Z|
 |                      |                        |   mem8[I<<16+HL] - 1       |    |
 +----------------------+------------------------+----------------------------+----+
 | dec SP               | 8F                     |  SP <- SP - 1              |   Z|
 +----------------------+------------------------+----------------------------+----+
 | inc rw               | 90+rw                  |  rw <- rw + 1              |   Z|
 +----------------------+------------------------+----------------------------+----+
 | tst A,B              | 94                     |  temp <- A and B           |S  Z|
 |                      |                        |update flags but don't store|    |
 +----------------------+------------------------+----------------------------+----+
 | tst [HL],imm8        | 95:imm8                |  temp <- mem8[I<<16+HL]    |S  Z|
 |                      |                        |   and imm8                 |    |
 |                      |                        |update flags but don't store|    |
 +----------------------+------------------------+----------------------------+----+
 | tst A,imm8           | 96:imm8                |  temp <- A and imm8        |S  Z|
 |                      |                        |update flags but don't store|    |
 +----------------------+------------------------+----------------------------+----+
 | tst B,imm8           | 97:imm8                |  temp <- B and imm8        |S  Z|
 |                      |                        |update flags but don't store|    |
 +----------------------+------------------------+----------------------------+----+
 | dec rw               | 98+rw                  |  rw <- rw - 1              |   Z|
 +----------------------+------------------------+----------------------------+----+
 | and F,imm8           | 9C:imm8                |  F <- F and imm8           |SoCZ|
 +----------------------+------------------------+----------------------------+----+
 | or F,imm8            | 9D:imm8                |  F <- F or imm8            |SoCZ|
 +----------------------+------------------------+----------------------------+----+
 | xor F,imm8           | 9E:imm8                |  F <- F xor imm8           |SoCZ|
 +----------------------+------------------------+----------------------------+----+
 | mov F,imm8           | 9F:imm8                |  F <- imm8                 |socz|
 +----------------------+------------------------+----------------------------+----+
 | push rw              | A0+rw                  |  SP <- SP - 2              | -  |
 |                      |                        |  mem8[SP] <- (rwLOW)       |    |
 |                      |                        |  mem8[SP+1] <- (rwHIGH)    |    |
 +----------------------+------------------------+----------------------------+----+
 | push N               | A4                     |  SP <- SP - 1              | -  |
 |                      |                        |  mem8[SP] <- N             |    |
 +----------------------+------------------------+----------------------------+----+
 | push I               | A5                     |  SP <- SP - 1              | -  |
 |                      |                        |  mem8[SP] <- I             |    |
 +----------------------+------------------------+----------------------------+----+
 | pushx                | A6                     |  SP <- SP - 2              | -  |
 |                      |                        |  mem8[SP] <- XI            |    |
 |                      |                        |  mem8[SP+1] <- YI          |    |
 +----------------------+------------------------+----------------------------+----+
 | push F               | A7                     |  SP <- SP - 1              | -  |
 |                      |                        |  mem8[SP] <- F             |    |
 +----------------------+------------------------+----------------------------+----+
 | pop rw               | A8+rw                  |  rwLOW <- mem[SP]          | -  |
 |                      |                        |  rwHIGH <- mem[SP+1]       |    |
 |                      |                        |  SP <- SP + 2              |    |
 +----------------------+------------------------+----------------------------+----+
 | pop N                | AC                     |  N <- mem[SP]              | -  |
 |                      |                        |  SP <- SP + 1              |    |
 +----------------------+------------------------+----------------------------+----+
 | pop I                | AD                     |  N <- mem[SP]              | -  |
 |                      |                        |  SP <- SP + 1              |    |
 +----------------------+------------------------+----------------------------+----+
 | popx                 | AE                     |  XI <- mem[SP]             | -  |
 |                      |                        |  YI <- mem[SP+1]           |    |
 |                      |                        |  SP <- SP + 2              |    |
 +----------------------+------------------------+----------------------------+----+
 | pop F                | AF                     |  F <- mem[SP]              |socz|
 |                      |                        |  SP <- SP + 1              |    |
 +----------------------+------------------------+----------------------------+----+
 | mov rb,imm8          | B0+rb:imm8             |  rb <- imm8                | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov N,imm8           | B4:imm8                |  N <- imm8                 | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov [HL],imm8        | B5:imm8                |  mem8[I<<16+HL] <- imm8    | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov [X],imm8         | B6:imm8                |  mem8[XI<<16+X] <- imm8    | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov [Y],imm8         | B7:imm8                |  mem8[YI<<16+Y] <- imm8    | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov rw,[ofs16]       | B8+rw:ofs16L:ofs16H    |  rw <- mem8[I<<16+ofs16]   | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov [ofs16],rw       | BC+rw:ofs16L:ofs16H    |  mem8[I<<16+ofs16] <- rw   | -  |
 +----------------------+------------------------+----------------------------+----+
 | add rw,imm16         | C0+rw:imm16L:imm16H    |  rw <- rw + imm16          |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | mov rw,imm16         | C4+rw:imm16L:imm16H    |  rw <- imm16               | -  |
 +----------------------+------------------------+----------------------------+----+
 | xchg BA,HL           | C8                     |  temp <- BA                |    |
 |                      |                        |  BA <- HL                  |    |
 |                      |                        |  HL <- temp                |    |
 +----------------------+------------------------+----------------------------+----+
 | xchg BA,X            | C9                     |  temp <- BA                |    |
 |                      |                        |  BA <- X                   |    |
 |                      |                        |  X <- temp                 |    |
 +----------------------+------------------------+----------------------------+----+
 | xchg BA,Y            | CA                     |  temp <- BA                |    |
 |                      |                        |  BA <- Y                   |    |
 |                      |                        |  Y <- temp                 |    |
 +----------------------+------------------------+----------------------------+----+
 | xchg BA,SP           | CB                     |  temp <- SP                |    |
 |                      |                        |  SP <- BA                  |    |
 |                      |                        |  BA <- temp                |    |
 +----------------------+------------------------+----------------------------+----+
 | xchg A,B             | CC                     |  temp <- A                 |    |
 |                      |                        |  A <- B                    |    |
 |                      |                        |  B <- temp                 |    |
 +----------------------+------------------------+----------------------------+----+
 | xchg A,[HL]          | CD                     |  temp <- A                 |    |
 |                      |                        |  A <- [I<<16+HL]           |    |
 |                      |                        |  [I<<16+HL] <- temp        |    |
 +----------------------+------------------------+----------------------------+----+
 | sub rw,imm16         | D0+rw:imm16L:imm16H    |  rw <- rw - imm16          |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | cmp rw,imm16         | D4+rw:imm16L:imm16H    |  temp <- rw - imm16        |SOCZ|
 |                      |                        |update flags but don't store|    |
 +----------------------+------------------------+----------------------------+----+
 | and [N+ofs8],imm8    | D8:ofs8:imm8           |  mem8[I<<16+N<<8+ofs8] <-  |S  Z|
 |                      |                        |   mem8[I<<16+N<<8+ofs8]    |    |
 |                      |                        |   and imm8                 |    |
 +----------------------+------------------------+----------------------------+----+
 | or [N+ofs8],imm8     | D9:ofs8:imm8           |  mem8[I<<16+N<<8+ofs8] <-  |S  Z|
 |                      |                        |   mem8[I<<16+N<<8+ofs8]    |    |
 |                      |                        |   or imm8                  |    |
 +----------------------+------------------------+----------------------------+----+
 | xor [N+ofs8],imm8    | DA:ofs8:imm8           |  mem8[I<<16+N<<8+ofs8] <-  |S  Z|
 |                      |                        |   mem8[I<<16+N<<8+ofs8]    |    |
 |                      |                        |   xor imm8                 |    |
 +----------------------+------------------------+----------------------------+----+
 | cmp [N+ofs8],imm8    | DB:ofs8:imm8           |  temp <-                   |S  Z|
 |                      |                        |   mem8[I<<16+N<<8+ofs8]    |    |
 |                      |                        |   - imm8                   |    |
 |                      |                        |update flags but don't store|    |
 +----------------------+------------------------+----------------------------+----+
 | tst [N+ofs8],imm8    | DC:ofs8:imm8           |  temp <-                   |S  Z|
 |                      |                        |  mem8[I<<16+N<<8+ofs8]     |    |
 |                      |                        |   and imm8                 |    |
 |                      |                        |update flags but don't store|    |
 +----------------------+------------------------+----------------------------+----+
 | mov [N+ofs8],imm8    | DD:ofs8:imm8           | ar <- HL[23:16]<<16+NN+ofs8| -  | 
 |                      |                        | mem8[ar]<- imm8            |    |
 +----------------------+------------------------+----------------------------+----+
 | pack                 | DE                     |  A <- (A and 0xF) or (B<<4)| -  |
 +----------------------+------------------------+----------------------------+----+
 | unpack               | DF                     |  B <- (A >> 8)             | -  |
 |                      |                        |  A <- (A and 0xF)          |    |
 +----------------------+------------------------+----------------------------+----+
 | callc disp8          | E0:disp8               |  if CF = 1 then            | -  |
 |                      |                        |       SP <- SP - 3         |    |
 |                      |                        |       mem16[SP] <- PC      |    |
 |                      |                        |       mem8[SP+2] <- V      |    |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp8 - 1 |    |
 +----------------------+------------------------+----------------------------+----+
 | callnc disp8         | E1:disp8               |  if CF = 0 then            | -  |
 |                      |                        |       SP <- SP - 3         |    |
 |                      |                        |       mem16[SP] <- PC      |    |
 |                      |                        |       mem8[SP+2] <- V      |    |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp8 - 1 |    |
 +----------------------+------------------------+----------------------------+----+
 | callz disp8          | E2:disp8               |  if ZF = 1 then            | -  |
 |                      |                        |       SP <- SP - 3         |    |
 |                      |                        |       mem16[SP] <- PC      |    |
 |                      |                        |       mem8[SP+2] <- V      |    |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp8 - 1 |    |
 +----------------------+------------------------+----------------------------+----+
 | callnz disp8         | E3:disp8               |  if ZF = 0 then            | -  |
 |                      |                        |       SP <- SP - 3         |    |
 |                      |                        |       mem16[SP] <- PC      |    |
 |                      |                        |       mem8[SP+2] <- V      |    |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp8 - 1 |    |
 +----------------------+------------------------+----------------------------+----+
 | jc disp8             | E4:disp8               |  if CF = 1 then            | -  |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp8 - 1 |    |
 +----------------------+------------------------+----------------------------+----+
 | jnc disp8            | E5:disp8               |  if CF = 0 then            | -  |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp8 - 1 |    |
 +----------------------+------------------------+----------------------------+----+
 | jz disp8             | E6:disp8               |  if ZF = 1 then            | -  |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp8 - 1 |    |
 +----------------------+------------------------+----------------------------+----+
 | jnz disp8            | E7:disp8               |  if ZF = 0 then            | -  |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp8 - 1 |    |
 +----------------------+------------------------+----------------------------+----+
 | callcw disp16        | E8:disp16L:disp16H     |  if CF = 1 then            | -  |
 |                      |                        |       SP <- SP - 3         |    |
 |                      |                        |       mem16[SP] <- PC      |    |
 |                      |                        |       mem8[SP+2] <- V      |    |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp16 - 1|    |
 +----------------------+------------------------+----------------------------+----+
 | callncw disp16       | E9:disp16L:disp16H     |  if CF = 0 then            | -  |
 |                      |                        |       SP <- SP - 3         |    |
 |                      |                        |       mem16[SP] <- PC      |    |
 |                      |                        |       mem8[SP+2] <- V      |    |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp16 - 1|    |
 +----------------------+------------------------+----------------------------+----+
 | callzw disp16        | EA:disp16L:disp16H     |  if ZF = 1 then            | -  |
 |                      |                        |       SP <- SP - 3         |    |
 |                      |                        |       mem16[SP] <- PC      |    |
 |                      |                        |       mem8[SP+2] <- V      |    |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp16 - 1|    |
 +----------------------+------------------------+----------------------------+----+
 | callnzw disp16       | EB:disp16L:disp16H     |  if ZF = 0 then            | -  |
 |                      |                        |       SP <- SP - 3         |    |
 |                      |                        |       mem16[SP] <- PC      |    |
 |                      |                        |       mem8[SP+2] <- V      |    |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp16 - 1|    |
 +----------------------+------------------------+----------------------------+----+
 | jcw disp16           | EC:disp16L:disp16H     |  if CF = 1 then            | -  |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp16 - 1|    |
 +----------------------+------------------------+----------------------------+----+
 | jncw disp16          | ED:disp16L:disp16H     |  if CF = 0 then            | -  |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp16 - 1|    |
 +----------------------+------------------------+----------------------------+----+
 | jzw disp16           | EE:disp16L:disp16H     |  if ZF = 1 then            | -  |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp16 - 1|    |
 +----------------------+------------------------+----------------------------+----+
 | jnzw disp16          | EF:disp16L:disp16H     |  if ZF = 0 then            | -  |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp16 - 1|    |
 +----------------------+------------------------+----------------------------+----+
 | call disp8           | F0:disp8               |  SP <- SP - 3              | -  |
 |                      |                        |  mem16[SP] <- PC           |    |
 |                      |                        |  mem8[SP+2] <- V           |    |
 |                      |                        |  V <- U                    |    |
 |                      |                        |  PC <- PC + disp8 - 1      |    |
 +----------------------+------------------------+----------------------------+----+
 | jmp disp8            | F1:disp8               |  PC <- PC + disp8 - 1      | -  |
 |                      |                        |  V <- U                    |    |
 +----------------------+------------------------+----------------------------+----+
 | callw disp16         | F2:disp16L:disp16H     |  SP <- SP - 3              | -  |
 |                      |                        |  mem16[SP] <- PC           |    |
 |                      |                        |  mem8[SP+2] <- V           |    |
 |                      |                        |  V <- U                    |    |
 |                      |                        |  PC <- PC + disp16 - 1     |    |
 +----------------------+------------------------+----------------------------+----+
 | jmpw disp16          | F3:disp16L:disp16H     |  PC <- PC + disp16 - 1     | -  |
 |                      |                        |  V <- U                    |    |
 +----------------------+------------------------+----------------------------+----+
 | jmp HL               | F4                     |  PC <- HL                  | -  |
 |                      |                        |  V <- U                    |    |
 +----------------------+------------------------+----------------------------+----+
 | jdbnz disp8          | F5:disp8               |  B <- B - 1                |   Z|
 |                      |                        |  if B <> 0 then            |    | 
 |                      |                        |     V <- U                 |    |
 |                      |                        |     PC <- PC + disp8 - 1   |    |
 +----------------------+------------------------+----------------------------+----+
 | swap A               | F6                     |  A <- (A >> 4) or (A << 4) | -  |
 +----------------------+------------------------+----------------------------+----+
 | swap [HL]            | F7                     |  mem8[I<<16+HL] <-         | -  |
 |                      |                        |   (mem8[HL] >> 4)          |    |
 |                      |                        |   or mem8[HL]              |    |
 +----------------------+------------------------+----------------------------+----+
 | ret                  | F8                     |  PC <- mem16[SP]           | -  |
 |                      |                        |  V <- mem8[SP+2]           |    |
 |                      |                        |  SP <- SP + 3              |    |
 +----------------------+------------------------+----------------------------+----+
 | reti                 | F9                     |  PC <- mem16[SP+1]         |socz|
 |                      |                        |  F <- mem8[SP]             |    |
 |                      |                        |  V <- mem8[SP+3]           |    |
 |                      |                        |  SP <- SP + 4              |    |
 +----------------------+------------------------+----------------------------+----+
 | retskip              | FA                     |  PC <- mem16[SP] + 2       |    |
 |                      |                        |  V <- mem8[SP+2]           |    |
 |                      |                        |  SP <- SP + 3              |    |
 +----------------------+------------------------+----------------------------+----+
 | call [ofs16]         | FB:ofs16L:ofs16H       |  SP <- SP - 3              | -  |
 |                      |                        |  mem16[SP] <- PC           |    |
 |                      |                        |  mem8[SP+2] <- V           |    |
 |                      |                        |  PC <- mem16[I<<16+ofs16]  |    |
 +----------------------+------------------------+----------------------------+----+
 | cint intNB           | FC:intNB<<1            |  SP <- SP - 4              | -  |
 |                      |                        |  mem8[SP] <- F             |    |
 |                      |                        |  mem16[SP+1] <- PC         |    |
 |                      |                        |  mem16[SP+3] <- V          |    |
 |                      |                        |  F <- F or 0x40 (???)      |    |
 |                      |                        |  PC <- mem16[intNB<<1]     |    |
 +----------------------+------------------------+----------------------------+----+
 | jint intNB           | FD:intNB<<1            |  PC <- mem16[intNB<<1]     | -  |
 |                      |                        |  V <- U (???)              |    |
 |                      |                        |  F <- F or 0x40 (???)      |    |
 |                      |                        |  and something else        |    |
 |                      |                        |  (???)                     |    |
 +----------------------+------------------------+----------------------------+----+
 | nop                  | FF                     |  nop                       | -  |
 +----------------------+------------------------+----------------------------+----+

EXTENDED 0

 +----------------------+------------------------+----------------------------+----+
 | add A,[X+ofs8]       | CE:00:ofs8             |  A <- A +                  |SOCZ|
 |                      |                        |   mem8[XI<<16+X+ofs8]      |    |
 +----------------------+------------------------+----------------------------+----+
 | add A,[Y+ofs8]       | CE:01:ofs8             |  A <- A +                  |SOCZ|
 |                      |                        |   mem8[YI<<16+Y+ofs8]      |    |
 +----------------------+------------------------+----------------------------+----+
 | add A,[X+L]          | CE:02                  |  A <- A +                  |SOCZ|
 |                      |                        |   mem8[XI<<16+X+L]         |    |
 +----------------------+------------------------+----------------------------+----+
 | add A,[Y+L]          | CE:03                  |  A <- A +                  |SOCZ|
 |                      |                        |   mem8[YI<<16+Y+L]         |    |
 +----------------------+------------------------+----------------------------+----+
 | add [HL],A           | CE:04                  |  mem8[I<<16+HL] <-         |SOCZ|
 |                      |                        |   mem8[I<<16+HL] + A       |    |
 +----------------------+------------------------+----------------------------+----+
 | add [HL],imm8        | CE:05:imm8             |  mem8[I<<16+HL] <-         |SOCZ|
 |                      |                        |   mem8[I<<16+HL] + imm8    |    |
 +----------------------+------------------------+----------------------------+----+
 | add [HL],[X]         | CE:06                  |  mem8[I<<16+HL] <-         |SOCZ|
 |                      |                        |   mem8[I<<16+HL] +         |    |
 |                      |                        |   mem8[XI<<16+X1]          |    |
 +----------------------+------------------------+----------------------------+----+
 | add [HL],[Y]         | CE:07                  |  mem8[I<<16+HL] <-         |SOCZ|
 |                      |                        |   mem8[I<<16+HL] +         |    |
 |                      |                        |   mem8[YI<<16+Y1]          |    |
 +----------------------+------------------------+----------------------------+----+
 | adc A,[X+ofs8]       | CE:08:ofs8             |  A <- A + CF +             |SOCZ|
 |                      |                        |   mem8[XI<<16+X+ofs8]      |    |
 +----------------------+------------------------+----------------------------+----+
 | adc A,[Y+ofs8]       | CE:09:ofs8             |  A <- A + CF +             |SOCZ|
 |                      |                        |   mem8[YI<<16+Y+ofs8]      |    |
 +----------------------+------------------------+----------------------------+----+
 | adc A,[X+L]          | CE:0A                  |  A <- A + CF +             |SOCZ|
 |                      |                        |   mem8[XI<<16+X+L]         |    |
 +----------------------+------------------------+----------------------------+----+
 | adc A,[Y+L]          | CE:0B                  |  A <- A + CF +             |SOCZ|
 |                      |                        |   mem8[YI<<16+Y+L]         |    |
 +----------------------+------------------------+----------------------------+----+
 | adc [HL],A           | CE:0C                  |  mem8[I<<16+HL] <-         |SOCZ|
 |                      |                        |   mem8[I<<16+HL] + A + CF  |    |
 +----------------------+------------------------+----------------------------+----+
 | adc [HL],imm8        | CE:0D:imm8             |  mem8[I<<16+HL] <-         |SOCZ|
 |                      |                        |  mem8[I<<16+HL] - imm8 - CF|    |
 +----------------------+------------------------+----------------------------+----+
 | adc [HL],[X]         | CE:0E                  |  mem8[I<<16+HL] <-         |SOCZ|
 |                      |                        |   mem8[I<<16+HL] +         |    |
 |                      |                        |   mem8[XI<<16+X1] + CF     |    |
 +----------------------+------------------------+----------------------------+----+
 | adc [HL],[Y]         | CE:0F                  |  mem8[I<<16+HL] <-         |SOCZ|
 |                      |                        |   mem8[I<<16+HL] +         |    |
 |                      |                        |   mem8[YI<<16+Y1] + CF     |    |
 +----------------------+------------------------+----------------------------+----+
 | sub A,[X+ofs8]       | CE:10:ofs8             |  A <- A -                  |SOCZ|
 |                      |                        |   mem8[XI<<16+X+ofs8]      |    |
 +----------------------+------------------------+----------------------------+----+
 | sub A,[Y+ofs8]       | CE:11:ofs8             |  A <- A -                  |SOCZ|
 |                      |                        |   mem8[YI<<16+Y+ofs8]      |    |
 +----------------------+------------------------+----------------------------+----+
 | sub A,[X+L]          | CE:12                  |  A <- A -                  |SOCZ|
 |                      |                        |   mem8[XI<<16+X+L]         |    |
 +----------------------+------------------------+----------------------------+----+
 | sub A,[Y+L]          | CE:13                  |  A <- A -                  |SOCZ|
 |                      |                        |   mem8[YI<<16+Y+L]         |    |
 +----------------------+------------------------+----------------------------+----+
 | sub [HL],A           | CE:14                  |  mem8[I<<16+HL] <-         |SOCZ|
 |                      |                        |   mem8[I<<16+HL] - A       |    |
 +----------------------+------------------------+----------------------------+----+
 | sub [HL],imm8        | CE:15:imm8             |  mem8[I<<16+HL] <-         |SOCZ|
 |                      |                        |   mem8[I<<16+HL] - imm8    |    |
 +----------------------+------------------------+----------------------------+----+
 | sub [HL],[X]         | CE:16                  |  mem8[I<<16+HL] <-         |SOCZ|
 |                      |                        |   mem8[I<<16+HL] -         |    |
 |                      |                        |   mem8[XI<<16+X1]          |    |
 +----------------------+------------------------+----------------------------+----+
 | sub [HL],[Y]         | CE:17                  |  mem8[I<<16+HL] <-         |SOCZ|
 |                      |                        |   mem8[I<<16+HL] -         |    |
 |                      |                        |   mem8[YI<<16+Y1]          |    |
 +----------------------+------------------------+----------------------------+----+
 | sbc A,[X+ofs8]       | CE:18:ofs8             |  A <- A - CF -             |SOCZ|
 |                      |                        |   mem8[XI<<16+X+ofs8]      |    |
 +----------------------+------------------------+----------------------------+----+
 | sbc A,[Y+ofs8]       | CE:19:ofs8             |  A <- A - CF -             |SOCZ|
 |                      |                        |   mem8[YI<<16+Y+ofs8]      |    |
 +----------------------+------------------------+----------------------------+----+
 | sbc A,[X+L]          | CE:1A                  |  A <- A - CF -             |SOCZ|
 |                      |                        |   mem8[XI<<16+X+L]         |    |
 +----------------------+------------------------+----------------------------+----+
 | sbc A,[Y+L]          | CE:1B                  |  A <- A - CF -             |SOCZ|
 |                      |                        |   mem8[YI<<16+Y+L]         |    |
 +----------------------+------------------------+----------------------------+----+
 | sbc [HL],A           | CE:1C                  |  mem8[I<<16+HL] <-         |SOCZ|
 |                      |                        |   mem8[I<<16+HL] - A - CF  |    |
 +----------------------+------------------------+----------------------------+----+
 | sbc [HL],imm8        | CE:1D:imm8             |  mem8[I<<16+HL] <-         |SOCZ|
 |                      |                        |  mem8[I<<16+HL] - imm8 - CF|    |
 +----------------------+------------------------+----------------------------+----+
 | sbc [HL],[X]         | CE:1E                  |  mem8[I<<16+HL] <-         |SOCZ|
 |                      |                        |   mem8[I<<16+HL] -         |    |
 |                      |                        |   mem8[XI<<16+X1] - CF     |    |
 +----------------------+------------------------+----------------------------+----+
 | sbc [HL],[Y]         | CE:1F                  |  mem8[I<<16+HL] <-         |SOCZ|
 |                      |                        |   mem8[I<<16+HL] -         |    |
 |                      |                        |   mem8[YI<<16+Y1] - CF     |    |
 +----------------------+------------------------+----------------------------+----+
 | and A,[X+ofs8]       | CE:20:ofs8             |  A <- A and                |S  Z|
 |                      |                        |   mem8[XI<<16+X+ofs8]      |    |
 +----------------------+------------------------+----------------------------+----+
 | and A,[Y+ofs8]       | CE:21:ofs8             |  A <- A and                |S  Z|
 |                      |                        |   mem8[YI<<16+Y+ofs8]      |    |
 +----------------------+------------------------+----------------------------+----+
 | and A,[X+L]          | CE:22                  |  A <- A and                |S  Z|
 |                      |                        |   mem8[XI<<16+X+L]         |    |
 +----------------------+------------------------+----------------------------+----+
 | and A,[Y+L]          | CE:23                  |  A <- A and                |S  Z|
 |                      |                        |   mem8[YI<<16+Y+L]         |    |
 +----------------------+------------------------+----------------------------+----+
 | and [HL],A           | CE:24                  |  mem8[I<<16+HL] <-         |S  Z|
 |                      |                        |   mem8[I<<16+HL] and A     |    |
 +----------------------+------------------------+----------------------------+----+
 | and [HL],imm8        | CE:25:imm8             |  mem8[I<<16+HL] <-         |S  Z|
 |                      |                        |   mem8[I<<16+HL] and imm8  |    |
 +----------------------+------------------------+----------------------------+----+
 | and [HL],[X]         | CE:26                  |  mem8[I<<16+HL] <-         |S  Z|
 |                      |                        |   mem8[I<<16+HL] and       |    |
 |                      |                        |   mem8[XI<<16+X]           |    |
 +----------------------+------------------------+----------------------------+----+
 | and [HL],[Y]         | CE:27                  |  mem8[I<<16+HL] <-         |S  Z|
 |                      |                        |   mem8[I<<16+HL] and       |    |
 |                      |                        |   mem8[YI<<16+Y]           |    |
 +----------------------+------------------------+----------------------------+----+
 | or A,[X+ofs8]        | CE:28:ofs8             |  A <- A or                 |S  Z|
 |                      |                        |   mem8[XI<<16+X+ofs8]      |    |
 +----------------------+------------------------+----------------------------+----+
 | or A,[Y+ofs8]        | CE:29:ofs8             |  A <- A or                 |S  Z|
 |                      |                        |   mem8[YI<<16+Y+ofs8]      |    |
 +----------------------+------------------------+----------------------------+----+
 | or A,[X+L]           | CE:2A                  |  A <- A or                 |S  Z|
 |                      |                        |   mem8[XI<<16+X+L]         |    |
 +----------------------+------------------------+----------------------------+----+
 | or A,[Y+L]           | CE:2B                  |  A <- A or                 |S  Z|
 |                      |                        |   mem8[YI<<16+Y+L]         |    |
 +----------------------+------------------------+----------------------------+----+
 | or [HL],A            | CE:2C                  |  mem8[I<<16+HL] <-         |S  Z|
 |                      |                        |   mem8[I<<16+HL] or A      |    |
 +----------------------+------------------------+----------------------------+----+
 | or [HL],imm8         | CE:2D:imm8             |  mem8[I<<16+HL] <-         |S  Z|
 |                      |                        |   mem8[I<<16+HL] or imm8   |    |
 +----------------------+------------------------+----------------------------+----+
 | or [HL],[X]          | CE:2E                  |  mem8[I<<16+HL] <-         |S  Z|
 |                      |                        |   mem8[I<<16+HL] or        |    |
 |                      |                        |   mem8[XI<<16+X]           |    |
 +----------------------+------------------------+----------------------------+----+
 | or [HL],[Y]          | CE:2F                  |  mem8[I<<16+HL] <-         |S  Z|
 |                      |                        |   mem8[I<<16+HL] or        |    |
 |                      |                        |   mem8[YI<<16+Y]           |    |
 +----------------------+------------------------+----------------------------+----+
 | cmp A,[X+ofs8]       | CE:30:ofs8             |  temp <- A -               |SOCZ|
 |                      |                        |   mem8[XI<<16+X+ofs8]      |    |
 |                      |                        |update flags but don't store|    |
 +----------------------+------------------------+----------------------------+----+
 | cmp A,[Y+ofs8]       | CE:31:ofs8             |  temp <- A -               |SOCZ|
 |                      |                        |   mem8[YI<<16+Y+ofs8]      |    |
 |                      |                        |update flags but don't store|    |
 +----------------------+------------------------+----------------------------+----+
 | cmp A,[X+L]          | CE:32                  |  temp <- A -               |SOCZ|
 |                      |                        |   mem8[XI<<16+X+L]         |    |
 |                      |                        |update flags but don't store|    |
 +----------------------+------------------------+----------------------------+----+
 | cmp A,[Y+L]          | CE:33                  |  temp <- A -               |SOCZ|
 |                      |                        |   mem8[YI<<16+Y+L]         |    |
 |                      |                        |update flags but don't store|    |
 +----------------------+------------------------+----------------------------+----+
 | cmp [HL],A           | CE:34                  |  temp <- mem8[I<<16+HL] - A|SOCZ|
 |                      |                        |update flags but don't store|    |
 +----------------------+------------------------+----------------------------+----+
 | cmp [HL],imm8        | CE:35:imm8             |  temp <-mem8[I<<16+HL]-imm8|SOCZ|
 |                      |                        |update flags but don't store|    |
 +----------------------+------------------------+----------------------------+----+
 | cmp [HL],[X]         | CE:36                  |  temp <-mem8[I<<16+HL] -   |SOCZ|
 |                      |                        |   mem8[XI<<16+X]           |    |
 |                      |                        |update flags but don't store|    |
 +----------------------+------------------------+----------------------------+----+
 | cmp [HL],[Y]         | CE:37                  |  temp <-mem8[I<<16+HL] -   |SOCZ|
 |                      |                        |   mem8[YI<<16+Y]           |    |
 |                      |                        |update flags but don't store|    |
 +----------------------+------------------------+----------------------------+----+
 | xor A,[X+ofs8]       | CE:38:ofs8             |  A <- A xor                |S  Z|
 |                      |                        |   mem8[XI<<16+X+ofs8]      |    |
 +----------------------+------------------------+----------------------------+----+
 | xor A,[Y+ofs8]       | CE:39:ofs8             |  A <- A xor                |S  Z|
 |                      |                        |   mem8[YI<<16+Y+ofs8]      |    |
 +----------------------+------------------------+----------------------------+----+
 | xor A,[X+L]          | CE:3A                  |  A <- A xor                |S  Z|
 |                      |                        |   mem8[XI<<16+X+L]         |    |
 +----------------------+------------------------+----------------------------+----+
 | xor A,[Y+L]          | CE:3B                  |  A <- A xor                |S  Z|
 |                      |                        |   mem8[YI<<16+Y+L]         |    |
 +----------------------+------------------------+----------------------------+----+
 | xor [HL],A           | CE:3C                  |  mem8[I<<16+HL] <-         |S  Z|
 |                      |                        |   mem8[I<<16+HL] xor A     |    |
 +----------------------+------------------------+----------------------------+----+
 | xor [HL],imm8        | CE:3D:imm8             |  mem8[I<<16+HL] <-         |S  Z|
 |                      |                        |   mem8[I<<16+HL] xor imm8  |    |
 +----------------------+------------------------+----------------------------+----+
 | xor [HL],[X]         | CE:3E                  |  mem8[I<<16+HL] <-         |S  Z|
 |                      |                        |   mem8[I<<16+HL] xor       |    |
 |                      |                        |   mem8[XI<<16+X]           |    |
 +----------------------+------------------------+----------------------------+----+
 | xor [HL],[Y]         | CE:3F                  |  mem8[I<<16+HL] <-         |S  Z|
 |                      |                        |   mem8[I<<16+HL] xor       |    |
 |                      |                        |   mem8[YI<<16+Y]           |    |
 +----------------------+------------------------+----------------------------+----+
 | mov rb,[X+ofs8]      | CE:40+rb<<3:ofs8       |  rb <- mem8[XI<<16+X+ofs8] | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov rb,[Y+ofs8]      | CE:41+rb<<3:ofs8       |  rb <- mem8[YI<<16+Y+ofs8] | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov rb,[X+L]         | CE:42+rb<<3            |  rb <- mem8[XI<<16+X+L]    | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov rb,[Y+L]         | CE:43+rb<<3            |  rb <- mem8[YI<<16+Y+L]    | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov [X+ofs8],rb      | CE:44+rb<<3:ofs8       |  mem8[XI<<16+X+ofs8] <- rb | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov [Y+ofs8],rb      | CE:45+rb<<3:ofs8       |  mem8[YI<<16+Y+ofs8] <- rb | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov [X+L],rb         | CE:46+rb<<3            |  mem8[XI<<16+X+L] <- rb    | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov [Y+L],rb         | CE:47+rb<<3            |  mem8[YI<<16+Y+L] <- rb    | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov [HL],[X+ofs8]    | CE:60:ofs8             |  mem8[I<<16+HL] <-         | -  |
 |                      |                        |   mem8[XI<<16+X+ofs8]      |    |
 +----------------------+------------------------+----------------------------+----+
 | mov [HL],[Y+ofs8]    | CE:61:ofs8             |  mem8[I<<16+HL] <-         | -  |
 |                      |                        |   mem8[YI<<16+Y+ofs8]      |    |
 +----------------------+------------------------+----------------------------+----+
 | mov [HL],[X+L]       | CE:62                  |  mem8[I<<16+HL] <-         | -  |
 |                      |                        |   mem8[XI<<16+X+L]         |    |
 +----------------------+------------------------+----------------------------+----+
 | mov [HL],[Y+L]       | CE:63                  |  mem8[I<<16+HL] <-         | -  |
 |                      |                        |   mem8[YI<<16+Y+L]         |    |
 +----------------------+------------------------+----------------------------+----+
 | mov [X],[X+ofs8]     | CE:68:ofs8             |  mem8[XI<<16+X] <-         | -  |
 |                      |                        |   mem8[XI<<16+X+ofs8]      |    |
 +----------------------+------------------------+----------------------------+----+
 | mov [X],[Y+ofs8]     | CE:69:ofs8             |  mem8[XI<<16+X] <-         | -  |
 |                      |                        |   mem8[YI<<16+Y+ofs8]      |    |
 +----------------------+------------------------+----------------------------+----+
 | mov [X],[X+L]        | CE:6A                  |  mem8[XI<<16+X] <-         | -  |
 |                      |                        |   mem8[XI<<16+X+L]         |    |
 +----------------------+------------------------+----------------------------+----+
 | mov [X],[Y+L]        | CE:6B                  |  mem8[XI<<16+X] <-         | -  |
 |                      |                        |   mem8[YI<<16+Y+L]         |    |
 +----------------------+------------------------+----------------------------+----+
 | mov [Y],[X+ofs8]     | CE:78:ofs8             |  mem8[YI<<16+Y] <-         | -  |
 |                      |                        |   mem8[XI<<16+X+ofs8]      |    |
 +----------------------+------------------------+----------------------------+----+
 | mov [Y],[Y+ofs8]     | CE:79:ofs8             |  mem8[YI<<16+Y] <-         | -  |
 |                      |                        |   mem8[YI<<16+Y+ofs8]      |    |
 +----------------------+------------------------+----------------------------+----+
 | mov [Y],[X+L]        | CE:7A                  |  mem8[YI<<16+Y] <-         | -  |
 |                      |                        |   mem8[XI<<16+X+L]         |    |
 +----------------------+------------------------+----------------------------+----+
 | mov [Y],[Y+L]        | CE:7B                  |  mem8[YI<<16+Y] <-         | -  |
 |                      |                        |   mem8[YI<<16+Y+L]         |    |
 +----------------------+------------------------+----------------------------+----+
 | sal A                | CE:80                  |  A <- A << 1               |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | sal B                | CE:81                  |  B <- B << 1               |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | sal [N+ofs8]         | CE:82:ofs8             |  ar = I<<16 + N<<8 + ofs8  |SOCZ|
 |                      |                        |   mem8[ar] <- mem8[ar] << 1|    |
 +----------------------+------------------------+----------------------------+----+
 | sal [HL]             | CE:83                  |  ar = I<<16 + N<<8 + ofs8  |SOCZ|
 |                      |                        |   mem8[ar] <- mem8[ar] << 1|    |
 +----------------------+------------------------+----------------------------+----+
 | shl A                | CE:84                  |  A <- A << 1               |S CZ|
 +----------------------+------------------------+----------------------------+----+
 | shl B                | CE:85                  |  B <- B << 1               |S CZ|
 +----------------------+------------------------+----------------------------+----+
 | shl [N+ofs8]         | CE:86:ofs8             |  ar = I<<16 + N<<8 + ofs8  |S CZ|
 |                      |                        |   mem8[ar] <- mem8[ar] << 1|    |
 +----------------------+------------------------+----------------------------+----+
 | shl [HL]             | CE:87                  |  ar = I<<16 + HL + ofs8    |S CZ|
 |                      |                        |   mem8[ar] <- mem8[ar] << 1|    |
 +----------------------+------------------------+----------------------------+----+
 | sar A                | CE:88                  | A <- A>>1 or (A and 0x80)) |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | sar B                | CE:89                  | B <- B>>1 or (B and 0x80)) |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | sar [N+ofs8]         | CE:8A:ofs8             |  ar = I<<16 + N<<8 + ofs8  |SOCZ|
 |                      |                        |   mem8[ar] <- mem8[ar] >> 1|    |
 |                      |                        |   or (mem8[ar] and 0x80)   |    |
 +----------------------+------------------------+----------------------------+----+
 | sar [HL]             | CE:8B                  |  ar = I<<16 + HL + ofs8    |SOCZ|
 |                      |                        |   mem8[ar] <- mem8[ar] >> 1|    |
 |                      |                        |   or (mem8[ar] and 0x80)   |    |
 +----------------------+------------------------+----------------------------+----+
 | shr A                | CE:8C                  |  A <- A >> 1               |S CZ|
 +----------------------+------------------------+----------------------------+----+
 | shr B                | CE:8D                  |  B <- B >> 1               |S CZ|
 +----------------------+------------------------+----------------------------+----+
 | shr [N+ofs8]         | CE:8E:ofs8             |  ar = I<<16 + N<<8 + ofs8  |S CZ|
 |                      |                        |   mem8[ar] <- mem8[ar] >> 1|    |
 +----------------------+------------------------+----------------------------+----+
 | shr [HL]             | CE:8F                  |  ar = I<<16 + HL + ofs8    |S CZ|
 |                      |                        |   mem8[ar] <- mem8[ar] >> 1|    |
 +----------------------+------------------------+----------------------------+----+
 | rolc A               | CE:90                  |  A <- A << 1 or CF         |S CZ|
 +----------------------+------------------------+----------------------------+----+
 | rolc B               | CE:91                  |  B <- B << 1 or CF         |S CZ|
 +----------------------+------------------------+----------------------------+----+
 | rolc [N+ofs8]        | CE:92:ofs8             | ar <- I<<16 + N<<8 + ofs8  |S CZ|
 |                      |                        | mem8[ar]<-mem8[ar]<<1 or CF|    |
 +----------------------+------------------------+----------------------------+----+
 | rolc [HL]            | CE:93                  | ar <- I<<16 + N<<8 + ofs8  |S CZ|
 |                      |                        | mem8[ar]<-mem8[ar]<<1 or CF|    |
 +----------------------+------------------------+----------------------------+----+
 | rol A                | CE:94                  |  A <- A<<1 or (A>>7)       |S CZ|
 +----------------------+------------------------+----------------------------+----+
 | rol B                | CE:95                  |  B <- B<<1 or (B>>7)       |S CZ|
 +----------------------+------------------------+----------------------------+----+
 | rol [N+ofs8]         | CE:96:ofs8             | ar <- I<<16 + N<<8 + ofs8  |S CZ|
 |                      |                        |  mem8[ar] <- mem8[ar] << 1 |    |
 |                      |                        |       or mem8[ar] >> 7     |    |
 +----------------------+------------------------+----------------------------+----+
 | rol [HL]             | CE:97                  | ar <- I<<16 + HL + ofs8    |S CZ|
 |                      |                        |  mem8[ar] <- mem8[ar] << 1 |    |
 |                      |                        |       or mem8[ar] >> 7     |    |
 +----------------------+------------------------+----------------------------+----+
 | rorc A               | CE:98                  | A <- A>>1 or CF<<7         |S CZ|
 +----------------------+------------------------+----------------------------+----+
 | rorc B               | CE:99                  | B <- B>>1 or CF<<7         |S CZ|
 +----------------------+------------------------+----------------------------+----+
 | rorc [N+ofs8]        | CE:9A:ofs8             | ar <- I<<16 + N<<8 + ofs8  |S CZ|
 |                      |                        |  mem8[ar]<-mem8[ar]>>1 or  |    |
 |                      |                        |         CF << 7            |    |
 +----------------------+------------------------+----------------------------+----+
 | rorc [HL]            | CE:9B                  | mem8[HL] <- mem8[HL]>>1 or |S CZ|
 |                      |                        |         CF << 7            |    |
 +----------------------+------------------------+----------------------------+----+
 | ror A                | CE:9C                  |  A <- A >> 1 or A << 7     |S CZ|
 +----------------------+------------------------+----------------------------+----+
 | ror B                | CE:9D                  |  B <- B >> 1 or B << 7     |S CZ|
 +----------------------+------------------------+----------------------------+----+
 | ror [N+ofs8]         | CE:9E:ofs8             | ar <- I<<16 + N<<8 + ofs8  |S CZ|
 |                      |                        |  mem8[ar] <- mem8[ar] >> 1 |    |
 |                      |                        |           or mem8[ar] << 7 |    |
 +----------------------+------------------------+----------------------------+----+
 | ror [HL]             | CE:9F                  | mem8[HL] <- mem8[HL]>>1 or |S CZ|
 |                      |                        |           or mem8[HL]<<7   |    |
 +----------------------+------------------------+----------------------------+----+
 | not A                | CE:A0                  |  A <- A xor 0xFF           |S  Z|
 +----------------------+------------------------+----------------------------+----+
 | not B                | CE:A1                  |  B <- B xor 0xFF           |S  Z|
 +----------------------+------------------------+----------------------------+----+
 | not [N+ofs8]         | CE:A2:ofs8             | ar <- I<<16 + N<<8 + ofs8  |S  Z|
 |                      |                        | mem8[ar]<-mem8[ar] xor 0xFF|    |
 +----------------------+------------------------+----------------------------+----+
 | not [HL]             | CE:A3                  | ar <- I<<16 + HL + ofs8    |S  Z|
 |                      |                        | mem8[HL]<-mem8[HL] xor 0xFF|    |
 +----------------------+------------------------+----------------------------+----+
 | neg A                | CE:A4                  |  A <- A xor 0xFF + 1       |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | neg B                | CE:A5                  |  B <- B xor 0xFF + 1       |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | neg [N+ofs8]         | CE:A6:ofs8             | ar <- I<<16 + N<<8 + ofs8  |SOCZ|
 |                      |                        | mem8[ar]<- m8[ar]xor 0xFF+1|    |
 +----------------------+------------------------+----------------------------+----+
 | neg [HL]             | CE:A7                  | ar <- I<<16 + N<<8 + ofs8  |SOCZ|
 |                      |                        | mem8[HL]<- m8[HL]xor 0xFF+1|    |
 +----------------------+------------------------+----------------------------+----+
 | ex BA,A              | CE:A8                  |  if A and 0x80 = 0 then    | -  |
 |                      |                        |  B <- 0x00 else B <- 0xFF  |    |
 +----------------------+------------------------+----------------------------+----+
 | halt                 | CE:AE                  |  Halt CPU                  | -  |
 +----------------------+------------------------+----------------------------+----+
 | stop                 | CE:AF                  |  Stop CPU (never use it!)  | -  |
 +----------------------+------------------------+----------------------------+----+
 | and B,imm8           | CE:B0:imm8             |  B <- B and imm8           |S  Z|
 +----------------------+------------------------+----------------------------+----+
 | and L,imm8           | CE:B1:imm8             |  L <- L and imm8           |S  Z|
 +----------------------+------------------------+----------------------------+----+
 | and H,imm8           | CE:B2:imm8             |  H <- H and imm8           |S  Z|
 +----------------------+------------------------+----------------------------+----+
 | or B,imm8            | CE:B4:imm8             |  B <- B or imm8            |S  Z|
 +----------------------+------------------------+----------------------------+----+
 | or L,imm8            | CE:B5:imm8             |  L <- L or imm8            |S  Z|
 +----------------------+------------------------+----------------------------+----+
 | or H,imm8            | CE:B6:imm8             |  H <- H or imm8            |S  Z|
 +----------------------+------------------------+----------------------------+----+
 | xor B,imm8           | CE:B8:imm8             |  B <- B xor imm8           |S  Z|
 +----------------------+------------------------+----------------------------+----+
 | xor L,imm8           | CE:B9:imm8             |  L <- L xor imm8           |S  Z|
 +----------------------+------------------------+----------------------------+----+
 | xor H,imm8           | CE:BA:imm8             |  H <- H xor imm8           |S  Z|
 +----------------------+------------------------+----------------------------+----+
 | cmp B,imm8           | CE:BC:imm8             |  temp <- B - imm8          |SOCZ|
 |                      |                        |update flags but don't store|    |
 |                      |                        | (???)                      |    |
 +----------------------+------------------------+----------------------------+----+
 | cmp L,imm8           | CE:BD:imm8             |  temp <- L - imm8          |SOCZ|
 |                      |                        |update flags but don't store|    |
 |                      |                        | (???)                      |    |
 +----------------------+------------------------+----------------------------+----+
 | cmp H,imm8           | CE:BE:imm8             |  temp <- H - imm8          |SOCZ|
 |                      |                        |update flags but don't store|    |
 |                      |                        | (???)                      |    |
 +----------------------+------------------------+----------------------------+----+
 | cmp N,imm8           | CE:BF:imm8             |  temp <- N - imm8          |SOCZ|
 |                      |                        |update flags but don't store|    |
 |                      |                        | (???)                      |    |
 +----------------------+------------------------+----------------------------+----+
 | mov A,N              | CE:C0                  |  A <- N                    | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov A,F              | CE:C1                  |  A <- F                    | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov N,A              | CE:C2                  |  N <- A                    | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov F,A              | CE:C3                  |  F <- A                    |socz|
 +----------------------+------------------------+----------------------------+----+
 | mov U,imm8           | CE:C4:imm8             |  U <- imm8                 | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov I,imm8           | CE:C5:imm8             |  I <- imm8                 | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov XI,imm8          | CE:C6:imm8             |  XI <- imm8                | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov YI,imm8          | CE:C7:imm8             |  YI <- imm8                | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov A,V              | CE:C8                  |  A <- V                    | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov A,I              | CE:C9                  |  A <- I                    | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov A,XI             | CE:CA                  |  A <- XI                   | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov A,YI             | CE:CB                  |  A <- YI                   | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov U,A              | CE:CC                  |  U <- A                    | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov I,A              | CE:CD                  |  I <- A                    | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov XI,A             | CE:CE                  |  XI <- A                   | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov YI,A             | CE:CF                  |  YI <- A                   | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov rb,[ofs16]       | CE:D0+rb:ofs16L:ofs16H |  rb <- mem8[ofs16]         | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov [ofs16],rb       | CE:D4+rb:ofs16L:ofs16H |  mem8[ofs16] <- rb         | -  |
 +----------------------+------------------------+----------------------------+----+
 | mul L,A              | CE:D8                  |  HL <- L * A               |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | div HL,A             | CE:D9                  |  HL <- HL / A              |SOCZ|
 |                      |                        |  if A = 0 then FLAGS<-0C   |    |
 +----------------------+------------------------+----------------------------+----+
 | jl disp8             | CE:E0:disp8            |  if SF <> OF then          | -  |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp8 - 1 |    |
 +----------------------+------------------------+----------------------------+----+
 | jle disp8            | CE:E1:disp8            |  if ZF=1 or SF <> OF then  | -  |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp8 - 1 |    |
 +----------------------+------------------------+----------------------------+----+
 | jg disp8             | CE:E2:disp8            |  if ZF=0 and SF = OF then  | -  |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp8 - 1 |    |
 +----------------------+------------------------+----------------------------+----+
 | jge disp8            | CE:E3:disp8            |  if SF = OF then           | -  |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp8 - 1 |    |
 +----------------------+------------------------+----------------------------+----+
 | jo disp8             | CE:E4:disp8            |  if OF = 1 then            | -  |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp8 - 1 |    |
 +----------------------+------------------------+----------------------------+----+
 | jno disp8            | CE:E5:disp8            |  if OF = 0 then            | -  |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp8 - 1 |    |
 +----------------------+------------------------+----------------------------+----+
 | jns disp8            | CE:E6:disp8            |  if SF = 0 then            | -  |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp8 - 1 |    |
 +----------------------+------------------------+----------------------------+----+
 | js disp8             | CE:E7:disp8            |  if SF = 1 then            | -  |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp8 - 1 |    |
 +----------------------+------------------------+----------------------------+----+
 | calll disp8          | CE:F0:disp8            |  if SF <> OF then          | -  |
 |                      |                        |       SP <- SP - 3         |    |
 |                      |                        |       mem16[SP] <- PC      |    |
 |                      |                        |       mem8[SP+2] <- V      |    |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp8 - 1 |    |
 +----------------------+------------------------+----------------------------+----+
 | callle disp8         | CE:F1:disp8            |  if ZF=1 or SF <> OF then  | -  |
 |                      |                        |       SP <- SP - 3         |    |
 |                      |                        |       mem16[SP] <- PC      |    |
 |                      |                        |       mem8[SP+2] <- V      |    |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp8 - 1 |    |
 +----------------------+------------------------+----------------------------+----+
 | callg disp8          | CE:F2:disp8            |  if ZF=0 and SF = OF then  | -  |
 |                      |                        |       SP <- SP - 3         |    |
 |                      |                        |       mem16[SP] <- PC      |    |
 |                      |                        |       mem8[SP+2] <- V      |    |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp8 - 1 |    |
 +----------------------+------------------------+----------------------------+----+
 | callge disp8         | CE:F3:disp8            |  if SF = OF then           | -  |
 |                      |                        |       SP <- SP - 3         |    |
 |                      |                        |       mem16[SP] <- PC      |    |
 |                      |                        |       mem8[SP+2] <- V      |    |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp8 - 1 |    |
 +----------------------+------------------------+----------------------------+----+
 | callo disp8          | CE:F4:disp8            |  if OF = 1 then            | -  |
 |                      |                        |       SP <- SP - 3         |    |
 |                      |                        |       mem16[SP] <- PC      |    |
 |                      |                        |       mem8[SP+2] <- V      |    |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp8 - 1 |    |
 +----------------------+------------------------+----------------------------+----+
 | callno disp8         | CE:F5:disp8            |  if OF = 0 then            | -  |
 |                      |                        |       SP <- SP - 3         |    |
 |                      |                        |       mem16[SP] <- PC      |    |
 |                      |                        |       mem8[SP+2] <- V      |    |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp8 - 1 |    |
 +----------------------+------------------------+----------------------------+----+
 | callns disp8         | CE:F6:disp8            |  if SF = 0 then            | -  |
 |                      |                        |       SP <- SP - 3         |    |
 |                      |                        |       mem16[SP] <- PC      |    |
 |                      |                        |       mem8[SP+2] <- V      |    |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp8 - 1 |    |
 +----------------------+------------------------+----------------------------+----+
 | calls disp8          | CE:F7:disp8            |  if SF = 1 then            | -  |
 |                      |                        |       SP <- SP - 3         |    |
 |                      |                        |       mem16[SP] <- PC      |    |
 |                      |                        |       mem8[SP+2] <- V      |    |
 |                      |                        |       V <- U               |    |
 |                      |                        |       PC <- PC + disp8 - 1 |    |
 +----------------------+------------------------+----------------------------+----+
                              
EXTENDED 1               
             
 +----------------------+------------------------+----------------------------+----+
 | add BA,rw            | CF:00+rw               |  BA <- BA + rw             |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | adc BA,rw            | CF:04+rw               |  BA <- BA + rw + CF        |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | sub BA,rw            | CF:08+rw               |  BA <- BA - rw             |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | sbc BA,rw            | CF:0C+rw               |  BA <- BA - rw - CF        |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | cmp BA,rw            | CF:18+rw               |  temp <- BA - rw           |SOCZ|
 |                      |                        |update flags but don't store|    |
 +----------------------+------------------------+----------------------------+----+
 | add HL,rw            | CF:20+rw               |  HL <- HL + rw             |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | adc HL,rw            | CF:24+rw               |  HL <- HL + rw + CF        |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | sub HL,rw            | CF:28+rw               |  HL <- HL - rw             |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | sbc HL,rw            | CF:2C+rw               |  HL <- HL - rw - CF        |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | cmp HL,rw            | CF:38+rw               |  temp <- HL - rw           |SOCZ|
 |                      |                        |update flags but don't store|    |
 +----------------------+------------------------+----------------------------+----+
 | add X,BA             | CF:40                  |  X1 <- X1 + BA             |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | add X,HL             | CF:41                  |  X1 <- X1 + HL             |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | add Y,BA             | CF:42                  |  X2 <- X2 + BA             |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | add Y,HL             | CF:43                  |  X2 <- X2 + HL             |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | add SP,BA            | CF:44                  |  SP <- SP + BA             |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | add SP,HL            | CF:45                  |  SP <- SP + HL             |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | sub X,BA             | CF:48                  |  X1 <- X1 - BA             |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | sub X,HL             | CF:49                  |  X1 <- X1 - HL             |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | sub Y,BA             | CF:4A                  |  X2 <- X2 - BA             |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | sub Y,HL             | CF:4B                  |  X2 <- X2 - HL             |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | sub SP,BA            | CF:4C                  |  SP <- SP - BA             |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | sub SP,HL            | CF:4D                  |  SP <- SP - HL             |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | cmp SP,BA            | CF:5C                  |  temp <- SP - BA           |SOCZ|
 |                      |                        |update flags but don't store|    |
 +----------------------+------------------------+----------------------------+----+
 | cmp SP,HL            | CF:5D                  |  temp <- SP - HL           |SOCZ|
 |                      |                        |update flags but don't store|    |
 +----------------------+------------------------+----------------------------+----+
 | adc ba,imm16         | CF:60:imm16L:imm16H    |  BA <- BA + imm16 + CF     |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | adc hl,imm16         | CF:61:imm16L:imm16H    |  HL <- HL + imm16 + CF     |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | sbc ba,imm16         | CF:62:imm16L:imm16H    |  BA <- BA - imm16 - CF     |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | sbc hl,imm16         | CF:63:imm16L:imm16H    |  HL <- HL - imm16 - CF     |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | add SP,imm16         | CF:68:imm16L:imm16H    |  SP <- SP + imm16          |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | sub SP,imm16         | CF:6A:imm16L:imm16H    |  SP <- SP - imm16          |SOCZ|
 +----------------------+------------------------+----------------------------+----+
 | cmp SP,imm16         | CF:6C:imm16L:imm16H    |  temp <- SP + imm16        |SOCZ|
 |                      |                        |update flags but don't store|    |
 +----------------------+------------------------+----------------------------+----+
 | mov SP,imm16         | CF:6E:imm16L:imm16H    |  SP <- imm16               | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov rw,[SP+ofs8]     | CF:70+rw:ofs8          |  rw <- mem16[SP+ofs8]      | -  | 
 +----------------------+------------------------+----------------------------+----+
 | mov [SP+ofs8],rw     | CF:74+rw:ofs8          |  mem16[SP+ofs8] <- rw      | -  | 
 +----------------------+------------------------+----------------------------+----+
 | mov SP,[ofs16]       | CF:78:ofs16L:ofs16H    |  SP <-                     | -  | 
 |                      |                        |  mem16[I<<16 + ofs16]      |    |
 +----------------------+------------------------+----------------------------+----+
 | mov [ofs16],SP       | CF:7C:ofs16L:ofs16H    |  mem16[I<<16 + ofs16]      | -  | 
 |                      |                        |  <- SP                     |    |
 +----------------------+------------------------+----------------------------+----+
 | push rb              | CF:B0+rb               |  SP <- SP - 1              | -  |
 |                      |                        |  mem8[SP] <- rb            |    |
 +----------------------+------------------------+----------------------------+----+
 | pop rb               | CF:B4+rb               |  rb <- mem8[SP]            | -  |
 |                      |                        |  SP <- SP + 1              |    |
 +----------------------+------------------------+----------------------------+----+
 | pusha                | CF:B8                  |  SP <- SP - 9              | -  |
 |                      |                        |  mem16[SP+7] <- BA         |    |
 |                      |                        |  mem16[SP+5] <- HL         |    |
 |                      |                        |  mem16[SP+3] <- X          |    |
 |                      |                        |  mem16[SP+1] <- Y          |    |
 |                      |                        |  mem8[SP] <- N             |    |
 +----------------------+------------------------+----------------------------+----+
 | pushax               | CF:B9                  |  SP <- SP - 12             | -  |
 |                      |                        |  mem16[SP+10] <- BA        |    |
 |                      |                        |  mem16[SP+8] <- HL         |    |
 |                      |                        |  mem16[SP+6] <- X          |    |
 |                      |                        |  mem16[SP+4] <- Y          |    |
 |                      |                        |  mem8[SP+3] <- N           |    |
 |                      |                        |  mem8[SP+2] <- I           |    |
 |                      |                        |  mem8[SP+1] <- XI          |    |
 |                      |                        |  mem8[SP] <- YI            |    |
 +----------------------+------------------------+----------------------------+----+
 | popa                 | CF:BC                  |  BA <- mem16[SP+7]         | -  |
 |                      |                        |  HL <- mem16[SP+5]         |    |
 |                      |                        |  X <- mem16[SP+3]          |    |
 |                      |                        |  Y <- mem16[SP+1]          |    |
 |                      |                        |  N <- mem8[SP]             |    |
 |                      |                        |  SP <- SP + 9              |    |
 +----------------------+------------------------+----------------------------+----+
 | popax                | CF:BD                  |  BA <- mem16[SP+10]        | -  |
 |                      |                        |  HL <- mem16[SP+8]         |    |
 |                      |                        |  X <- mem16[SP+6]          |    |
 |                      |                        |  Y <- mem16[SP+4]          |    |
 |                      |                        |  N <- mem8[SP+3]           |    |
 |                      |                        |  I <- mem8[SP+2]           |    |
 |                      |                        |  XI <- mem8[SP+1]          |    |
 |                      |                        |  YI <- mem8[SP]            |    |
 |                      |                        |  SP <- SP + 12             |    |
 +----------------------+------------------------+----------------------------+----+
 | mov rw,[HL]          | CF:C0+rw               |  rw <- mem16[HL]           | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov [HL],rw          | CF:C4+rw               |  mem16[HL] <- rw           | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov rw,[X]           | CF:D0+rw               |  rw <- mem16[X]            | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov [X],rw           | CF:D4+rw               |  mem16[X] <- rw            | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov rw,[Y]           | CF:D8+rw               |  rw <- mem16[Y]            | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov [Y],rw           | CF:DC+rw               |  mem16[Y] <- rw            | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov rw1,rw2          | CF:E0+rw1<<2+rw2       |  rw1 <- rw2                | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov SP,rw            | CF:F0+rw               |  SP <- rw                  | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov HL,SP            | CF:F4                  |  HL <- SP                  | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov HL,PC            | CF:F5                  |  HL <- PC                  | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov BA,SP            | CF:F8                  |  BA <- SP                  | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov BA,PC            | CF:F9                  |  BA <- PC                  | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov X,SP             | CF:FA                  |  X1 <- SP                  | -  |
 +----------------------+------------------------+----------------------------+----+
 | mov Y,SP             | CF:FE                  |  X2 <- SP                  | -  |
 +----------------------+------------------------+----------------------------+----+

INVALID OPCODES (NON-EXTENDED) : 7C, FE
INVALID OPCODES (EXTENDED 0): 64-67, 6C-77, 7C-7F, A9-AD, B3, B7, BB, DA-DF
INVALID OPCODES (EXTENDED 1): 10-17, 1C-1F, 30-37, 3C-3F, 46-47, 4E-5B, 
                              5E-5F, 64-67, 69, 6B, 6D, 6F, 79-7B, 7D-AF,
                              BA-BB, BE-BF, C8-CF, F6-F7, FB-FD, FF
                              

------------------------------------------------------------------------------
 MINDX ASSEMBLER SAMPLE CODE
------------------------------------------------------------------------------

**Note: This information apply to the old version.**

The "mindx" assembler is able to assemble min cpu code. 
For a good sample of code, look at sokomini sourcecode !

The "mindx" assembler directives are :
  .equ symbol, value
  .incbin file
  .db value,"string",value,....
  .dw value,value,...
  .dd value,...
  .org        (change base but don't pad with 0 to this new address)
  .orgfill    (change base and pad with 0 to this new address)
  
Constants can be calculated in the assembly  like that:
Operations are    +, -                  (low priority)
                  *, /, &, |, >>, <<    (high priority)

Exemple:     .db ($100+2*2-(1+1))-$101 

Hexadecimal numbers can start with $ or 0x
Comments start with ; or # or //

You don't need to put the "b" or "w" at the end of the operand if there's
no possible misinterpretation of what you mean. (use "mov a,12" instead of
"movb a,12")

Here is an example of code to test the assembler:

edecode_picture: 
   movw  x2, $0E40    # start of encoded picture
   movw  x1, $1530    # destination buffer

#-- start decoding the picture in RAM at address 0x1530

loop_decode:
    movb  a, [x2]      # read data byte
    incw  x2           # increment source index
    cmpb  a, $F9       # if it's F9: "special meaning":  
    jnz  @notF9

@command_fill_zeroes:       # fills X+1 bytes with 00
    MOVB  b, [x2]      # read next byte (X)
    incw  x2           # increment source index
    incb  b      # X+1, so we can fill 256 zeroes max
    xorb  a, a      
@@zero_fill_loop: 
    movb  [x1], a      # write one zero
    incw  x1           # increment destination index
    jbdnz  @@zero_fill_loop
    jmp  loop_next

@notF9: 
    cmpb  a, $FB       # if it's FB: "special meaning"
    jnz  @normalbyte

@command_fill_byte:         # fills X+1 bytes with byte Y
    movb  a, [x2]      # read next byte (Y)
    incw  x2           # increment x2
    movb  b, [x2]      # read next byte (X)
    incw  x2
    incb  b       # X+1, so we can fill 256 bytes max
@@fill_loop: 
    movb  [x1], a      # fill
    incw  x1
    jbdnz  @@fill_loop
    jmp  loop_next

@normalbyte: 
    movb  [x1], a      # it was a normal byte, we
    incw  x1           # just copy it to destination
                                                # buffer!
loop_next: 
    cmpw  x2, $1000
    jnz  loop_decode
    
#-- the picture is now decoded in RAM 

# assembler test
    movb [nn+8],loop_next/256
    movb [nn+9],loop_next
    incw  x1           # just copy it to destination
    int $42
    int ($100+2*2-(1+1))-$101 # should be 1
    incw  x1           # just copy it to destination
    cmpw x2,$1000    
 
 New mindx features
 . = current address
 you can now put a label and an instruction on the same line

    
------------------------------------------------------------------------------
 REVERSE ENGINEERING TIPS
------------------------------------------------------------------------------

In the PAL GC .dol file of Pokemon, that contains the emulator, there's an
opcode table at 0x801DAE90. The first 0x100 entries are for simple 
instructions, next 0x100 are for EXTENDED 0 instructions, the last 0x100 
entries are for EXTENDED 1 instructions.

emu_struct is at 0x813ae910 :
   0x00000000   4    "T"
   0x00000008   1    PMA: Points to PM address space in GC RAM - 0x30
   0x0000000E   1    B register
   0x0000000F   1    A register
   0x00000010   4    HL register (note: it's stored in a 32bit mem space!)
   0x00000014   4    X1 register   "     "
   0x00000018   4    X2 register   "     "
   0x0000001C   1    "U"
   0x0000001E   2    PC register 
   0x00000021   1    "V"  # = "U" when a jump is taken
   0x00000026   2    SP register (stack pointer)
   0x00000028   4    Scratch index register used for NN addressing mode
   0x0000002A   1    N register
   0x0000002C   1    FLAGS register  [??][??][??][??][SF][OF][CF][ZF]
   0x0000002D   1    ???Flags???
   0x0000002E   2(1?) Top of stack ? (or interrupt reg???)
   0x0000003E   2    Internal Opcode Number (for opcode table)
   0x00000037   1    imm8/disp8/etc
   0x00000036   1    2nd immediate value, for imm16 for instance

When RAM is accessed, typically the PMA is read in a register (lets say r3) 
then it's added to the address of the RAM we want to access and it's loaded 
like with a 0x30 offset, because the PMA has a 0x30 offset:
- lwz  r0,0x30(r3)

.text1:8006C4B0                 mtctr   r12
.text1:8006C4B4                 bctrl                   # bl opcode (dispatch)

some PM code extract (entrypoint of BIOS is 0x9A)


_send_flash_command_preamble:
 0000058F:    CE C5 00       movx  hl, $00

cart_stamp_check:
  00000139:    B1 08          movb  b, $08     ; 8 chars to compae
  0000013B:    C6 A4 21       movw  x1, $21A4  ; <- cartidge "NINTENDO"
  0000013E:    C7 1A 0E       movw  x2, $0E1A  ; <- internal "NINTENDO"
  00000141:    46             movb  a, [x1]
  00000142:    37             cmpb a, [x2]
  00000143:    EF 61 0C       jnz  @00000DA6   ; string mismatch!!
  00000146:    92             incw  x1         
  00000147:    93             incw  x2
  00000148:    F5 F8          jbdnz  @00000141 ; compare next char
  0000014A:    38             xorb  a, a       ; OK ! we have a cart!
  
 